#include <iostream>
#include <fstream>
#include <cstring>
#include <cstdlib>
#include <sstream>
#include <bits/stdc++.h>
#include <sys/time.h>
using namespace std;

struct elements
{
	int num;
	string string1;
	string string2;
	string string3;
};
struct elements one[50];

void ShellSort(struct elements two[2],int size) {
	int i, j, s, pas, qq;
	double h[20];
	struct elements temp;
	
	for (i=0; i <= 19; i++) 
		h[i] = pow(2, i);
	
	for (s=19; s >= 0; s--) {
		pas = h[s];
		for (j = pas; j < size; j++) {
			i = j - pas;
			qq = two[j].num;
			do {
				if (qq >= two[i].num) 
				break;
				temp = two[i];
                two[i] = two[i + 1];
                two[i + 1] = temp;
				i = i - pas;
			} while (i >= 0);
			two[i+pas].num = qq;
		}
	}
}


int main(int argc, char** argv) {
	string myText;
	int count=0,value,i=0;
	 struct timespec start, end;
    double time_taken;
	
	ifstream MyReadFile("elements.txt");
	
	getline(MyReadFile, myText);
	stringstream geek(myText);
	int x = 0;
    geek >> x;
    one[0].num = x;

    
	
	while (getline (MyReadFile, myText)) {
  		count++;
  		if(count == 1)
  		{
  			one[i].string1 = myText;
		}
		else if(count == 2)
		{
			one[i].string2 = myText;
		}
		else if(count == 3)
		{
			one[i].string3 = myText;
		}
		else if(count == 4)
		{
			stringstream geek(myText);
			int y = 0;
    		geek >> y;
    		one[i].num = y;
			count=0;
			i++;
		}

				
}
	// xronos gia bubble sort
	clock_gettime(CLOCK_MONOTONIC, &start); 
	ShellSort(one,50);
	clock_gettime(CLOCK_MONOTONIC, &end); 
	time_taken = (end.tv_sec - start.tv_sec) * 1e9;
	time_taken = (time_taken + (end.tv_nsec - start.tv_nsec)) * 1e-9; 
	printf("xronos gia tin shell sort %f\n",time_taken);
	

	
	
	
	return 0;
}
